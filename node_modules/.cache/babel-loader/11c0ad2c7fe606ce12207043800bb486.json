{"ast":null,"code":"export function getSelectionSortAnimations(array) {\n  const animations = [];\n  var min, minIdx;\n\n  for (let i = 0; i < array.length; i++) {\n    min = array[i];\n    minIdx = i;\n\n    for (let j = i; j < array.length - i; j++) {\n      if (array[j] < min) {\n        min = array[j];\n        min = j;\n      }\n    }\n\n    animations.push([i, array[i]]);\n    animations.push([minIdx, min]);\n  }\n} // export function getMergeSortAnimations(array) {\n//     const animations = [];\n//     if (array.length <= 1) return array;\n//     const auxiliaryArray = array.slice();\n//     mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\n//     return animations;\n// }\n// function mergeSort(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n//     if (startIdx === endIdx) return;\n//     const middleIdx = Math.floor((startIdx + endIdx) / 2);\n//     mergeSort(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n//     mergeSort(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n//     merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n// }\n// function merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n//     let k = startIdx;\n//     let i = startIdx;\n//     let j = middleIdx + 1;\n//     while (i <= middleIdx && j <= endIdx) {\n//       animations.push([i, j]);\n//       animations.push([i, j]);\n//       if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n//         animations.push([k, auxiliaryArray[i]]);\n//         mainArray[k++] = auxiliaryArray[i++];\n//       } else {\n//         animations.push([k, auxiliaryArray[j]]);\n//         mainArray[k++] = auxiliaryArray[j++];\n//       }\n//     }\n//     while (i <= middleIdx) {\n//       animations.push([i, i]);\n//       animations.push([i, i]);\n//       animations.push([k, auxiliaryArray[i]]);\n//       mainArray[k++] = auxiliaryArray[i++];\n//     }\n//     while (j <= endIdx) {\n//       animations.push([j, j]);\n//       animations.push([j, j]);\n//       animations.push([k, auxiliaryArray[j]]);\n//       mainArray[k++] = auxiliaryArray[j++];\n//     }\n// }","map":{"version":3,"sources":["C:/Users/Ryan/Desktop/my-app/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["getSelectionSortAnimations","array","animations","min","minIdx","i","length","j","push"],"mappings":"AAAA,OAAO,SAASA,0BAAT,CAAoCC,KAApC,EAA2C;AAChD,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAIC,GAAJ,EAASC,MAAT;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCF,IAAAA,GAAG,GAAGF,KAAK,CAACI,CAAD,CAAX;AACAD,IAAAA,MAAM,GAAGC,CAAT;;AACA,SAAI,IAAIE,CAAC,GAAGF,CAAZ,EAAeE,CAAC,GAAIN,KAAK,CAACK,MAAN,GAAaD,CAAjC,EAAqCE,CAAC,EAAtC,EAA0C;AACxC,UAAIN,KAAK,CAACM,CAAD,CAAL,GAAWJ,GAAf,EAAoB;AAClBA,QAAAA,GAAG,GAAGF,KAAK,CAACM,CAAD,CAAX;AACAJ,QAAAA,GAAG,GAAGI,CAAN;AACD;AACF;;AACDL,IAAAA,UAAU,CAACM,IAAX,CAAgB,CAACH,CAAD,EAAIJ,KAAK,CAACI,CAAD,CAAT,CAAhB;AACAH,IAAAA,UAAU,CAACM,IAAX,CAAgB,CAACJ,MAAD,EAASD,GAAT,CAAhB;AACD;AACF,C,CAED;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["export function getSelectionSortAnimations(array) {\r\n  const animations = [];\r\n  var min, minIdx;\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    min = array[i];\r\n    minIdx = i;\r\n    for(let j = i; j < (array.length-i); j++) {\r\n      if (array[j] < min) {\r\n        min = array[j];\r\n        min = j;\r\n      }\r\n    }\r\n    animations.push([i, array[i]]);\r\n    animations.push([minIdx, min]);\r\n  }\r\n}\r\n\r\n// export function getMergeSortAnimations(array) {\r\n//     const animations = [];\r\n//     if (array.length <= 1) return array;\r\n//     const auxiliaryArray = array.slice();\r\n//     mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    \r\n//     return animations;\r\n// }\r\n\r\n// function mergeSort(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\r\n//     if (startIdx === endIdx) return;\r\n//     const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n//     mergeSort(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n//     mergeSort(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n//     merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n// }\r\n\r\n// function merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\r\n//     let k = startIdx;\r\n//     let i = startIdx;\r\n//     let j = middleIdx + 1;\r\n//     while (i <= middleIdx && j <= endIdx) {\r\n//       animations.push([i, j]);\r\n//       animations.push([i, j]);\r\n//       if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n//         animations.push([k, auxiliaryArray[i]]);\r\n//         mainArray[k++] = auxiliaryArray[i++];\r\n//       } else {\r\n//         animations.push([k, auxiliaryArray[j]]);\r\n//         mainArray[k++] = auxiliaryArray[j++];\r\n//       }\r\n//     }\r\n//     while (i <= middleIdx) {\r\n\r\n//       animations.push([i, i]);\r\n\r\n//       animations.push([i, i]);\r\n//       animations.push([k, auxiliaryArray[i]]);\r\n//       mainArray[k++] = auxiliaryArray[i++];\r\n//     }\r\n//     while (j <= endIdx) {\r\n//       animations.push([j, j]);\r\n//       animations.push([j, j]);\r\n//       animations.push([k, auxiliaryArray[j]]);\r\n//       mainArray[k++] = auxiliaryArray[j++];\r\n//     }\r\n// }"]},"metadata":{},"sourceType":"module"}