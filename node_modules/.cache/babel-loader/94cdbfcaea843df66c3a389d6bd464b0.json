{"ast":null,"code":"export function getSelectionSortAnimations(array) {\n  const animations = [];\n  var min, minIdx;\n\n  for (let i = 0; i < array.length; i++) {\n    min = array[i];\n    minIdx = i;\n\n    for (let j = i; j < array.length; j++) {\n      if (array[j] < min) {\n        min = array[j];\n        minIdx = j;\n      }\n    }\n\n    array[minIdx] = array[i];\n    array[i] = min;\n    animations.push([i, array[i]]);\n    animations.push([minIdx, min]);\n  }\n\n  return animations;\n}\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSort(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSort(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSort(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"sources":["C:/Users/Ryan/Desktop/my-app/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["getSelectionSortAnimations","array","animations","min","minIdx","i","length","j","push","getMergeSortAnimations","auxiliaryArray","slice","mergeSort","mainArray","startIdx","endIdx","middleIdx","Math","floor","merge","k"],"mappings":"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","sourcesContent":["export function getSelectionSortAnimations(array) {\r\n  const animations = [];\r\n  var min, minIdx;\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    min = array[i];\r\n    minIdx = i;\r\n    for(let j = i; j < array.length; j++) {\r\n      if (array[j] < min) {\r\n        min = array[j];\r\n        minIdx = j;\r\n      }\r\n    }\r\n    array[minIdx] = array[i];\r\n    array[i] = min;\r\n    animations.push([i, array[i]]);\r\n    animations.push([minIdx, min]);\r\n  }\r\n\r\n  return animations;\r\n}\r\n\r\nexport function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    \r\n    return animations;\r\n}\r\n\r\nfunction mergeSort(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSort(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSort(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      animations.push([i, j]);\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n\r\n      animations.push([i, i]);\r\n\r\n      animations.push([i, i]);\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      animations.push([j, j]);\r\n      animations.push([j, j]);\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}