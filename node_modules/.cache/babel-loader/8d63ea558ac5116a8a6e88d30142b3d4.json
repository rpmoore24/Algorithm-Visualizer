{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Ryan\\\\Desktop\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ryan\\\\Desktop\\\\my-app\\\\src\\\\SortingVisualizer\\\\SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport { getSelectionSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\nconst ANIMATION_SPEED_MS = 1;\nconst NUMBER_OF_ARRAY_BARS = 200;\nconst PRIMARY_COLOR = 'turqoise';\nconst SECONDARY_COLOR = 'red';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    var numBars = document.getElementById(\"slider\").value;\n\n    for (let i = 0; i < numBars; i++) {\n      array.push(Math.floor(Math.random() * 100 + 1));\n    }\n\n    array[Math.floor(Math.random() * numBars)] = 100;\n    this.setState({\n      array\n    });\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i += 2) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      setTimeout(() => {\n        const _animations$i = _slicedToArray(animations[i], 2),\n              barOneIdx = _animations$i[0],\n              originalHeight = _animations$i[1];\n\n        const _animations = _slicedToArray(animations[++i], 2),\n              barTwoIdx = _animations[0],\n              newHeight = _animations[1];\n\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        barOneStyle.height = `${newHeight}%`;\n        barTwoStyle.height = `${originalHeight}%`;\n      }, i * ANIMATION_SPEED_MS);\n    }\n  }\n\n  selectionSort() {\n    const animations = getSelectionSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i += 2) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      setTimeout(() => {\n        const _animations$i2 = _slicedToArray(animations[i], 2),\n              barOneIdx = _animations$i2[0],\n              originalHeight = _animations$i2[1];\n\n        const _animations2 = _slicedToArray(animations[++i], 2),\n              barTwoIdx = _animations2[0],\n              newHeight = _animations2[1];\n\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        barOneStyle.height = `${newHeight}%`;\n        barTwoStyle.height = `${originalHeight}%`;\n      }, i * ANIMATION_SPEED_MS);\n    }\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 2; i < animations.length; i += 3) {\n      const arrayBars = document.getElementsByClassName('array-bar'); //   const isColorChange = i % 3 !== 2;\n      //   if (isColorChange) {\n      //     const [barOneIdx, barTwoIdx] = animations[i];\n      //     const barOneStyle = arrayBars[barOneIdx].style;\n      //     const barTwoStyle = arrayBars[barTwoIdx].style;\n      //     const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n      //     setTimeout(() => {\n      //       barOneStyle.backgroundColor = color;\n      //       barTwoStyle.backgroundColor = color;\n      //     }, i * ANIMATION_SPEED_MS);\n      //   } else {\n\n      setTimeout(() => {\n        const _animations$i3 = _slicedToArray(animations[i], 2),\n              barOneIdx = _animations$i3[0],\n              newHeight = _animations$i3[1];\n\n        const barOneStyle = arrayBars[barOneIdx].style;\n        barOneStyle.height = `${newHeight}%`;\n      }, i * ANIMATION_SPEED_MS);\n    }\n  }\n\n  render() {\n    const array = this.state.array;\n    const width = 100 / array.length;\n    return React.createElement(\"div\", {\n      className: \"sort-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"test\",\n      className: \"array-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, array.map((value, idx) => React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx // style = {{height: `${value}px`, marginLeft: `${(idx*width)+idx+1}px`, width: width}}>\n      ,\n      style: {\n        height: `${value}%`,\n        width: `${width}%`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"generate\",\n      onClick: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"GENERATE NEW ARRAY\"), React.createElement(\"button\", {\n      id: \"merge\",\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"MERGE SORT\"), React.createElement(\"button\", {\n      id: \"selection\",\n      onClick: () => this.selectionSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"SELECTION SORT\"), React.createElement(\"button\", {\n      id: \"selection\",\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"BUBBLE SORT\"), React.createElement(\"input\", {\n      id: \"slider\",\n      type: \"range\",\n      min: \"10\",\n      max: \"200\",\n      onChange: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Ryan/Desktop/my-app/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getSelectionSortAnimations","getBubbleSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","numBars","document","getElementById","value","i","push","Math","floor","random","setState","bubbleSort","animations","length","arrayBars","getElementsByClassName","setTimeout","barOneIdx","originalHeight","barTwoIdx","newHeight","barOneStyle","style","barTwoStyle","height","selectionSort","mergeSort","render","width","map","idx"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,sBAAR,QAAqC,2CAArC;AACA,SAAQC,0BAAR,QAAyC,2CAAzC;AACA,SAAQC,uBAAR,QAAsC,2CAAtC;AACA,OAAO,yBAAP;AAEA,MAAMC,kBAAkB,GAAG,CAA3B;AACA,MAAMC,oBAAoB,GAAG,GAA7B;AACA,MAAMC,aAAa,GAAG,UAAtB;AACA,MAAMC,eAAe,GAAG,KAAxB;AAEA,eAAe,MAAMC,iBAAN,SAAgCR,KAAK,CAACS,SAAtC,CAAgD;AAC3DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE;AADE,KAAb;AAIH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,UAAL;AAEH;;AAEDA,EAAAA,UAAU,GAAG;AACT,UAAMF,KAAK,GAAG,EAAd;AACA,QAAIG,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCC,KAAhD;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAApB,EAA6BI,CAAC,EAA9B,EAAkC;AAC9BP,MAAAA,KAAK,CAACQ,IAAN,CAAWC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAiB,GAAjB,GAAwB,CAAnC,CAAX;AACH;;AACDX,IAAAA,KAAK,CAACS,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcR,OAAzB,CAAD,CAAL,GAA2C,GAA3C;AACA,SAAKS,QAAL,CAAc;AAACZ,MAAAA;AAAD,KAAd;AACH;;AAEDa,EAAAA,UAAU,GAAG;AACT,UAAMC,UAAU,GAAGxB,uBAAuB,CAAC,KAAKS,KAAL,CAAWC,KAAZ,CAA1C;;AAEA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,UAAU,CAACC,MAA/B,EAAuCR,CAAC,IAAE,CAA1C,EAA6C;AACzC,YAAMS,SAAS,GAAGZ,QAAQ,CAACa,sBAAT,CAAgC,WAAhC,CAAlB;AAEAC,MAAAA,UAAU,CAAC,MAAM;AAAA,6CACsBJ,UAAU,CAACP,CAAD,CADhC;AAAA,cACPY,SADO;AAAA,cACIC,cADJ;;AAAA,2CAEiBN,UAAU,CAAC,EAAEP,CAAH,CAF3B;AAAA,cAEPc,SAFO;AAAA,cAEIC,SAFJ;;AAGb,cAAMC,WAAW,GAAGP,SAAS,CAACG,SAAD,CAAT,CAAqBK,KAAzC;AACA,cAAMC,WAAW,GAAGT,SAAS,CAACK,SAAD,CAAT,CAAqBG,KAAzC;AACAD,QAAAA,WAAW,CAACG,MAAZ,GAAsB,GAAEJ,SAAU,GAAlC;AACAG,QAAAA,WAAW,CAACC,MAAZ,GAAsB,GAAEN,cAAe,GAAvC;AACH,OAPS,EAOPb,CAAC,GAAGhB,kBAPG,CAAV;AAQH;AAEJ;;AAEDoC,EAAAA,aAAa,GAAG;AACZ,UAAMb,UAAU,GAAGzB,0BAA0B,CAAC,KAAKU,KAAL,CAAWC,KAAZ,CAA7C;;AAEA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,UAAU,CAACC,MAA/B,EAAuCR,CAAC,IAAE,CAA1C,EAA6C;AACzC,YAAMS,SAAS,GAAGZ,QAAQ,CAACa,sBAAT,CAAgC,WAAhC,CAAlB;AAEAC,MAAAA,UAAU,CAAC,MAAM;AAAA,8CACsBJ,UAAU,CAACP,CAAD,CADhC;AAAA,cACPY,SADO;AAAA,cACIC,cADJ;;AAAA,4CAEiBN,UAAU,CAAC,EAAEP,CAAH,CAF3B;AAAA,cAEPc,SAFO;AAAA,cAEIC,SAFJ;;AAGb,cAAMC,WAAW,GAAGP,SAAS,CAACG,SAAD,CAAT,CAAqBK,KAAzC;AACA,cAAMC,WAAW,GAAGT,SAAS,CAACK,SAAD,CAAT,CAAqBG,KAAzC;AACAD,QAAAA,WAAW,CAACG,MAAZ,GAAsB,GAAEJ,SAAU,GAAlC;AACAG,QAAAA,WAAW,CAACC,MAAZ,GAAsB,GAAEN,cAAe,GAAvC;AACH,OAPS,EAOPb,CAAC,GAAGhB,kBAPG,CAAV;AAQH;AACJ;;AAEDqC,EAAAA,SAAS,GAAG;AACR,UAAMd,UAAU,GAAG1B,sBAAsB,CAAC,KAAKW,KAAL,CAAWC,KAAZ,CAAzC;;AAEA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,UAAU,CAACC,MAA/B,EAAuCR,CAAC,IAAE,CAA1C,EAA6C;AAC3C,YAAMS,SAAS,GAAGZ,QAAQ,CAACa,sBAAT,CAAgC,WAAhC,CAAlB,CAD2C,CAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACIC,MAAAA,UAAU,CAAC,MAAM;AAAA,8CACgBJ,UAAU,CAACP,CAAD,CAD1B;AAAA,cACRY,SADQ;AAAA,cACGG,SADH;;AAEf,cAAMC,WAAW,GAAGP,SAAS,CAACG,SAAD,CAAT,CAAqBK,KAAzC;AACAD,QAAAA,WAAW,CAACG,MAAZ,GAAsB,GAAEJ,SAAU,GAAlC;AACD,OAJS,EAIPf,CAAC,GAAGhB,kBAJG,CAAV;AAKD;AACF;;AAGLsC,EAAAA,MAAM,GAAG;AAAA,UACE7B,KADF,GACW,KAAKD,KADhB,CACEC,KADF;AAEL,UAAM8B,KAAK,GAAG,MAAI9B,KAAK,CAACe,MAAxB;AAEA,WACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,EAAE,EAAC,MAAR;AAAe,MAAA,SAAS,EAAC,iBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKf,KAAK,CAAC+B,GAAN,CAAU,CAACzB,KAAD,EAAQ0B,GAAR,KACP;AACI,MAAA,SAAS,EAAG,WADhB;AAEI,MAAA,GAAG,EAAEA,GAFT,CAGI;AAHJ;AAII,MAAA,KAAK,EAAI;AAACN,QAAAA,MAAM,EAAG,GAAEpB,KAAM,GAAlB;AAAsBwB,QAAAA,KAAK,EAAG,GAAEA,KAAM;AAAtC,OAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CADL,CADJ,EAWI;AAAK,MAAA,SAAS,EAAG,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,EAAE,EAAC,UAAX;AAAsB,MAAA,OAAO,EAAE,MAAM,KAAK5B,UAAL,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,EAEI;AAAQ,MAAA,EAAE,EAAC,OAAX;AAAmB,MAAA,OAAO,EAAE,MAAM,KAAK0B,SAAL,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,EAGI;AAAQ,MAAA,EAAE,EAAC,WAAX;AAAuB,MAAA,OAAO,EAAE,MAAM,KAAKD,aAAL,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHJ,EAII;AAAQ,MAAA,EAAE,EAAC,WAAX;AAAuB,MAAA,OAAO,EAAE,MAAM,KAAKd,UAAL,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAJJ,EAKI;AAAO,MAAA,EAAE,EAAC,QAAV;AAAmB,MAAA,IAAI,EAAC,OAAxB;AAAgC,MAAA,GAAG,EAAC,IAApC;AAAyC,MAAA,GAAG,EAAC,KAA7C;AAAmD,MAAA,QAAQ,EAAE,MAAK,KAAKX,UAAL,EAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CAXJ,CADJ;AAqBH;;AA9G0D","sourcesContent":["import React from 'react';\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport {getSelectionSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './SortingVisualizer.css';\r\n\r\nconst ANIMATION_SPEED_MS = 1;\r\nconst NUMBER_OF_ARRAY_BARS = 200;\r\nconst PRIMARY_COLOR = 'turqoise';\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        var numBars = document.getElementById(\"slider\").value;\r\n        for (let i = 0; i < numBars; i++) {\r\n            array.push(Math.floor(Math.random() * (100) + 1));\r\n        }\r\n        array[Math.floor(Math.random()*numBars)] = 100;\r\n        this.setState({array});\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length; i+=2) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n            setTimeout(() => {\r\n                const[barOneIdx, originalHeight] = animations[i];\r\n                const[barTwoIdx, newHeight] = animations[++i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                barOneStyle.height = `${newHeight}%`;\r\n                barTwoStyle.height = `${originalHeight}%`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n        }\r\n\r\n    }\r\n\r\n    selectionSort() {\r\n        const animations = getSelectionSortAnimations(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length; i+=2) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n            setTimeout(() => {\r\n                const[barOneIdx, originalHeight] = animations[i];\r\n                const[barTwoIdx, newHeight] = animations[++i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                barOneStyle.height = `${newHeight}%`;\r\n                barTwoStyle.height = `${originalHeight}%`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n        }\r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n\r\n        for (let i = 2; i < animations.length; i+=3) {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n        //   const isColorChange = i % 3 !== 2;\r\n        //   if (isColorChange) {\r\n        //     const [barOneIdx, barTwoIdx] = animations[i];\r\n        //     const barOneStyle = arrayBars[barOneIdx].style;\r\n        //     const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        //     const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        //     setTimeout(() => {\r\n        //       barOneStyle.backgroundColor = color;\r\n        //       barTwoStyle.backgroundColor = color;\r\n        //     }, i * ANIMATION_SPEED_MS);\r\n        //   } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}%`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          }\r\n        }\r\n    \r\n\r\n    render() {\r\n        const {array} = this.state;\r\n        const width = 100/array.length;\r\n\r\n        return (\r\n            <div className=\"sort-container\">\r\n                <div id=\"test\" className=\"array-container\">\r\n                    {array.map((value, idx) => (\r\n                        <div \r\n                            className = \"array-bar\" \r\n                            key={idx}\r\n                            // style = {{height: `${value}px`, marginLeft: `${(idx*width)+idx+1}px`, width: width}}>\r\n                            style = {{height: `${value}%`, width: `${width}%`}}>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className = \"button-container\">\r\n                    <button id=\"generate\" onClick={() => this.resetArray()}>GENERATE NEW ARRAY</button>\r\n                    <button id=\"merge\" onClick={() => this.mergeSort()}>MERGE SORT</button>\r\n                    <button id=\"selection\" onClick={() => this.selectionSort()}>SELECTION SORT</button>\r\n                    <button id=\"selection\" onClick={() => this.bubbleSort()}>BUBBLE SORT</button>\r\n                    <input id=\"slider\" type=\"range\" min=\"10\" max=\"200\" onChange={() =>this.resetArray()}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}