{"ast":null,"code":"export function getInsertionSortAnimations(array) {\n  const animations = [];\n  var nextPos = 1;\n  var temp = 0;\n\n  for (let i = 1; i < array.length; i++) {\n    nextPos = i;\n\n    while (nextPos > 0 && array[nextPos - 1] > array[nextPos]) {\n      animations.push([nextPos - 1, array[nextPos - 1]]);\n      animations.push([nextPos, array[nextPos]]);\n      temp = array[nextPos];\n      array[nextPos] = array[nextPos - 1];\n      array[nextPos-- - 1] = temp;\n    }\n  }\n\n  return animations;\n}\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  var sorted = false;\n  var temp = 0;\n\n  while (!sorted) {\n    sorted = true;\n\n    for (let i = 0; i < array.length - 1; i++) {\n      if (array[i + 1] < array[i]) {\n        sorted = false;\n        animations.push([i, array[i]]);\n        animations.push([i + 1, array[i + 1]]);\n        temp = array[i];\n        array[i] = array[i + 1];\n        array[i + 1] = temp;\n      }\n    }\n  }\n\n  return animations;\n}\nexport function getSelectionSortAnimations(array) {\n  const animations = [];\n  var min, minIdx;\n\n  for (let i = 0; i < array.length; i++) {\n    min = array[i];\n    minIdx = i;\n\n    for (let j = i; j < array.length; j++) {\n      if (array[j] < min) {\n        min = array[j];\n        minIdx = j;\n      }\n    }\n\n    animations.push([i, array[i]]);\n    animations.push([minIdx, min]);\n    array[minIdx] = array[i];\n    array[i] = min;\n  }\n\n  return animations;\n}\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSort(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSort(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSort(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"sources":["C:/Users/Ryan/Desktop/Algorithm-Visualizer/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["getInsertionSortAnimations","array","animations","nextPos","temp","i","length","push","getBubbleSortAnimations","sorted","getSelectionSortAnimations","min","minIdx","j","getMergeSortAnimations","auxiliaryArray","slice","mergeSort","mainArray","startIdx","endIdx","middleIdx","Math","floor","merge","k"],"mappings":"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","sourcesContent":["export function getInsertionSortAnimations(array) {\r\n  const animations = [];\r\n  var nextPos = 1;\r\n  var temp = 0;\r\n\r\n  for (let i = 1; i < array.length; i++) {\r\n    nextPos = i;\r\n    while(nextPos > 0 && array[nextPos-1] > array[nextPos]) {\r\n      animations.push([nextPos-1, array[nextPos-1]]);\r\n      animations.push([nextPos, array[nextPos]]);\r\n      temp = array[nextPos];\r\n      array[nextPos] = array[nextPos-1];\r\n      array[(nextPos--)-1] = temp;\r\n    }\r\n  }\r\n\r\n  return animations;\r\n}\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  var sorted = false;\r\n  var temp = 0;\r\n\r\n  while (!sorted) {\r\n    sorted = true;\r\n    for (let i = 0; i < (array.length-1); i++) {\r\n      if (array[i+1] < array[i]) {\r\n        sorted = false;\r\n        animations.push([i, array[i]]);\r\n        animations.push([i+1, array[i+1]]);\r\n        temp = array[i];\r\n        array[i] = array[i+1];\r\n        array[i+1] = temp;\r\n      }\r\n    }\r\n  }\r\n\r\n  return animations;\r\n}\r\n\r\nexport function getSelectionSortAnimations(array) {\r\n  const animations = [];\r\n  var min, minIdx;\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    min = array[i];\r\n    minIdx = i;\r\n    for(let j = i; j < array.length; j++) {\r\n      if (array[j] < min) {\r\n        min = array[j];\r\n        minIdx = j;\r\n      }\r\n    }\r\n\r\n    animations.push([i, array[i]]);\r\n    animations.push([minIdx, min]);    \r\n    array[minIdx] = array[i];\r\n    array[i] = min;\r\n  }\r\n\r\n  return animations;\r\n}\r\n\r\nexport function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    \r\n    return animations;\r\n}\r\n\r\nfunction mergeSort(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSort(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSort(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      animations.push([i, j]);\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n\r\n      animations.push([i, i]);\r\n\r\n      animations.push([i, i]);\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      animations.push([j, j]);\r\n      animations.push([j, j]);\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}