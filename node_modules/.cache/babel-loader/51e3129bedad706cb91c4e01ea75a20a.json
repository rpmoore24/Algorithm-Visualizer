{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Ryan\\\\Desktop\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ryan\\\\Desktop\\\\my-app\\\\src\\\\SortingVisualizer\\\\SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\nconst ANIMATION_SPEED_MS = 1;\nconst NUMBER_OF_ARRAY_BARS = 200;\nconst PRIMARY_COLOR = 'turqoise';\nconst SECONDARY_COLOR = 'red';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    var numBars = document.getElementById(\"scroll\").value;\n    numBars = 4;\n\n    for (let i = 0; i < numBars; i++) {\n      array.push(Math.floor(Math.random() * (730 - 5 + 1) + 5));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  resizeArray() {\n    const array = [];\n    var numBars = document.getElementById(\"scroll\").value;\n    numBars = 4;\n\n    for (let i = 0; i < numBars; i++) {\n      array.push(Math.floor(Math.random() * (730 - 5 + 1) + 5));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 2; i < animations.length; i += 3) {\n      const arrayBars = document.getElementsByClassName('array-bar'); //   const isColorChange = i % 3 !== 2;\n      //   if (isColorChange) {\n      //     const [barOneIdx, barTwoIdx] = animations[i];\n      //     const barOneStyle = arrayBars[barOneIdx].style;\n      //     const barTwoStyle = arrayBars[barTwoIdx].style;\n      //     const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n      //     setTimeout(() => {\n      //       barOneStyle.backgroundColor = color;\n      //       barTwoStyle.backgroundColor = color;\n      //     }, i * ANIMATION_SPEED_MS);\n      //   } else {\n\n      setTimeout(() => {\n        const _animations$i = _slicedToArray(animations[i], 2),\n              barOneIdx = _animations$i[0],\n              newHeight = _animations$i[1];\n\n        const barOneStyle = arrayBars[barOneIdx].style;\n        barOneStyle.height = `${newHeight}px`;\n      }, i * ANIMATION_SPEED_MS);\n    }\n  }\n\n  render() {\n    const array = this.state.array;\n    const numBars = array.length;\n    return React.createElement(\"div\", {\n      className: \"sort-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"test\",\n      className: \"array-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, array.map((value, idx) => React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx // style = {{height: `${value}px`, marginLeft: `${(idx*width)+idx+1}px`, width: width}}>\n      ,\n      style: {\n        height: `${value}px`,\n        marginLeft: `${idx + 1}px`,\n        width: `${100 / numBars}%`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"generate\",\n      onClick: () => this.resizeArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"GENERATE NEW ARRAY\"), React.createElement(\"button\", {\n      id: \"merge\",\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"MERGE SORT\"), React.createElement(\"input\", {\n      id: \"scroll\",\n      type: \"range\",\n      min: \"10\",\n      max: \"200\",\n      onChange: () => this.resizeArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Ryan/Desktop/my-app/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","numBars","document","getElementById","value","i","push","Math","floor","random","setState","resizeArray","mergeSort","animations","length","arrayBars","getElementsByClassName","setTimeout","barOneIdx","newHeight","barOneStyle","style","height","render","map","idx","marginLeft","width"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './SortingVisualizer.css';\r\n\r\nconst ANIMATION_SPEED_MS = 1;\r\nconst NUMBER_OF_ARRAY_BARS = 200;\r\nconst PRIMARY_COLOR = 'turqoise';\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        var numBars = document.getElementById(\"scroll\").value;\r\n        numBars = 4;\r\n        for (let i = 0; i < numBars; i++) {\r\n            array.push(Math.floor(Math.random() * (730 - 5 + 1) + 5));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    resizeArray() {\r\n        const array = [];\r\n        var numBars = document.getElementById(\"scroll\").value;\r\n        numBars = 4;\r\n        for (let i = 0; i < numBars; i++) {\r\n            array.push(Math.floor(Math.random() * (730 - 5 + 1) + 5));\r\n        }\r\n        this.setState({array});  \r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n\r\n        for (let i = 2; i < animations.length; i+=3) {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n        //   const isColorChange = i % 3 !== 2;\r\n        //   if (isColorChange) {\r\n        //     const [barOneIdx, barTwoIdx] = animations[i];\r\n        //     const barOneStyle = arrayBars[barOneIdx].style;\r\n        //     const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        //     const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        //     setTimeout(() => {\r\n        //       barOneStyle.backgroundColor = color;\r\n        //       barTwoStyle.backgroundColor = color;\r\n        //     }, i * ANIMATION_SPEED_MS);\r\n        //   } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          }\r\n        }\r\n    \r\n\r\n    render() {\r\n        const {array} = this.state;\r\n        const numBars = array.length;\r\n\r\n        return (\r\n            <div className=\"sort-container\">\r\n                <div id=\"test\" className = \"array-container\">\r\n                {array.map((value, idx) => (\r\n                    <div \r\n                        className = \"array-bar\" \r\n                        key={idx}\r\n                        // style = {{height: `${value}px`, marginLeft: `${(idx*width)+idx+1}px`, width: width}}>\r\n                        style = {{height: `${value}px`, marginLeft: `${idx+1}px`, width: `${100/numBars}%`}}>\r\n                    </div>\r\n                ))}\r\n                </div>\r\n                <div className = \"button-container\">\r\n                    <button id=\"generate\" onClick={() => this.resizeArray()}>GENERATE NEW ARRAY</button>\r\n                    <button id=\"merge\" onClick={() => this.mergeSort()}>MERGE SORT</button>\r\n                    <input id=\"scroll\" type=\"range\" min=\"10\" max=\"200\" onChange={() =>this.resizeArray()}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}